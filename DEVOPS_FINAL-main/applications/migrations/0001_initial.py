# Generated by Django 4.2.2 on 2023-07-12 17:14

import applications.managers
import applications.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', applications.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='registerecandidates',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('candidateName', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=20)),
                ('datecreated', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EducationalDetailsForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenthSchool', models.CharField(max_length=100, null=True)),
                ('tenthBoard', models.CharField(choices=[('CBSE', 'CBSE'), ('ICSE', 'ICSE'), ('STATE', 'STATE'), ('OTHERS', 'OTHERS')], max_length=10, null=True)),
                ('tenthRollNo', models.IntegerField(null=True)),
                ('tenthPercent', models.FloatField(null=True)),
                ('clg12th', models.CharField(max_length=200, null=True)),
                ('clgBoard', models.CharField(max_length=200, null=True)),
                ('rollNo12th', models.IntegerField(null=True)),
                ('pecentage12th', models.FloatField(null=True)),
                ('emailid', models.EmailField(max_length=254, null=True)),
                ('annualIncome', models.CharField(choices=[('Less than 1 lakh', 'Less than 1 lakh'), ('Less than 2.5 lakhs', 'Less than 2.5 lakhs'), ('Less than 10 lakhs', 'Less than 10 lakhs'), ('Greater than 10 lakhs', 'Greater than 10 lakhs')], max_length=50, null=True)),
                ('candidateId', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CandidateForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidateName', models.CharField(max_length=50, null=True)),
                ('contactNo', models.CharField(max_length=10, null=True, validators=[applications.models.validate_contactno])),
                ('dateOfBirth', models.DateField()),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('OTHERS', 'OTHERS')], max_length=10, null=True)),
                ('fatherName', models.CharField(max_length=50, null=True)),
                ('foccupation', models.CharField(max_length=50, null=True)),
                ('motherName', models.CharField(max_length=50, null=True)),
                ('moccupation', models.CharField(max_length=50, null=True)),
                ('martialStat', models.CharField(choices=[('MARRIED', 'MARRIED'), ('UNMARRIED', 'UNMARRIED')], max_length=10, null=True)),
                ('AdhaarNo', models.CharField(max_length=12, null=True, validators=[applications.models.validate_Adhaarno])),
                ('phouseno', models.CharField(max_length=60, null=True)),
                ('pstreetcolony', models.CharField(max_length=100, null=True)),
                ('pstate', models.CharField(max_length=25, null=True)),
                ('ppincode', models.IntegerField(null=True)),
                ('prehouseno', models.CharField(max_length=60, null=True)),
                ('prestreetcolony', models.CharField(max_length=100, null=True)),
                ('prestate', models.CharField(max_length=25, null=True)),
                ('prepincode', models.IntegerField(null=True)),
                ('appid', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
    ]
